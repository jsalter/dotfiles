set shell=bash
set nocompatible

" Vundle and bundles configuration
source ~/.vim/bundles.vim

set history=256                    " remember n commands
set hidden                         " switch buffers without saving

let mapleader=","

" formatting
set formatoptions-=r               " don't autoinsert comment leader after enter
set backspace=indent,eol,start
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

" appearance
syntax on
set background=light
set laststatus=2                   " show status line always
set list                           " display unprintable characters
set listchars=tab:\ \ ,trail:Â·     " show tabs and trailing spaces

if has('gui_running')
  " hide menubar
  set go-=m
  " hide toolbar
  set go-=T

  " hide scrollbars
  set go-=l
  set go-=L
  set go-=r
  set go-=R

  if has('mac')
    set guifont=Sauce\ Code\ Powerline:h13
  elseif has('gui_gtk2')
    set guifont=Inconsolata-dz\ for\ Powerline\ 10
  endif
endif

" backups
set backup
set noswapfile
if exists('+undofile')
  set undofile
endif

let s:dir=match(system('uname'), 'Darwin') > -1 ? '~/Library/Vim' : empty($XDG_DATA_HOME) ? '~/.local/share/vim' : '$XDG_DATA_HOME/vim'
if !isdirectory(expand(s:dir) . '/undo')
  call mkdir(expand(s:dir) . '/undo', 'p')
endif
if !isdirectory(expand(s:dir) . '/backup')
  call mkdir(expand(s:dir) . '/backup', 'p')
endif
if !isdirectory(expand(s:dir) . '/swap')
  call mkdir(expand(s:dir) . '/swap', 'p')
endif
if isdirectory(expand(s:dir))
  if exists('+undodir') && &undodir =~# '^\.\%(,\|$\)'
    let &undodir = expand(s:dir) . '/undo//,' . &undodir
  endif
  if &backupdir =~# '^\.,'
    let &backupdir = expand(s:dir) . '/backup//,' . &backupdir
  endif
  if &directory =~# '^\.,'
    let &directory = expand(s:dir) . '/swap//,' . &directory
  endif
endif

colorscheme solarized
let g:airline_theme='solarized'
let g:airline_powerline_fonts=1
let g:vim_markdown_folding_disabled=1
nmap <leader>= :TagbarToggle<CR>
let g:tagbar_autofocus=1
let g:syntastic_tex_chktex_args='-n1'
let g:ctrlp_map='<leader>,'
let g:ctrlp_cmd='CtrlP'
nnoremap <leader>u :GundoToggle<CR>
let g:pandoc#modules#disabled=["folding"]

" autocommands
augroup filetypes
  au!
  au FileType gitconfig setlocal noexpandtab
  au FileType python setlocal expandtab shiftwidth=4 softtabstop=4
  au FileType haskell setlocal expandtab shiftwidth=4 softtabstop=4
  au FileType lisp setlocal nolist
  au FileType * setlocal fo-=r
augroup END

augroup twospace
  au!
  au BufRead * setlocal cpo+=J
augroup END

inoremap <C-u> <esc>gUiwea
nnoremap zh mzzt10<c-u>`z

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
